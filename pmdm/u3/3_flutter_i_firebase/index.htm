<!DOCTYPE html>
<html lang="ca">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="stylesheet" href="../../../../css?family=Noto+Sans+JP">
    <link rel="stylesheet" href="../../../css/main.css">

    
    <title>3. Desenvolupamentamb Flutter. Pràctica amb Firebase.</title>
</head>

<body>
    
    <div class="header-container">
        
        
        
        
        
    </div>

    
    <div class="main-container">
<nav>
    <h3>
        <a href="../index.htm">
        Unitat 3. Flutter</a>
    </h3>
    
        
        
        <div class="unitat">
            <a href="../1_flutter/index.htm">1. Introducció a Flutter</a>
        </div>
        
        <div class="unitat">
            <a href="../2_flutter/index.htm">2. Desenvolupamentamb Flutter. Widgets i Futures.</a>
        </div>
        
        <div class="unitat">
            <a href="index.htm">3. Desenvolupamentamb Flutter. Pràctica amb Firebase.</a>
        </div>
        
    
</nav>
    <article>
        <header> 
            <h1>3. Desenvolupamentamb Flutter. Pràctica amb Firebase.</h1>
        </header>
        <hr>
<h2 id="introducció">Introducció</h2>
<p>En aquesta APAC anem a crear una aplicació en Flutter que mostre una pantalla de Login, amb un logotip de l&rsquo;aplicació i que ens permeta autenticar-nos amb el nostre compte de Google, i una vegada passat aquest Login, ens porte a una pantalla amb una llista de targetes amb el contingut d&rsquo;una base de dades a Firebase.</p>
<p>El resultat de l&rsquo;aplicació serà semblant al següent:</p>
<p><img src="../img/app.png" alt="Aplicació PelisFlutter"></p>
<h2 id="punt-de-partida">Punt de partida</h2>
<p>Per tal de començar aquesta pràctica necessitarem haver tingut ja un primer contacte amb Firebase. Si no ho féreu en el seu moment, doneu-li una ullada a l'<a href="https://github.com/DAMElJust/MultiplataformaWeb/blob/main/fonts/7_Firebase_Capacitor.md">Exemple d&rsquo;aplicació amb Firebase i Capacitor</a>, concretament a l&rsquo;apartat <a href="https://github.com/DAMElJust/MultiplataformaWeb/blob/main/fonts/7_Firebase_Capacitor.md#firebase">que parla sobre Firebase</a>.</p>
<p>Pel que fa a Firebase, necessitarem:</p>
<ul>
<li>Tindre un compte creat per tal de poder accedir a la Consola de Firebase (podeu accedir amb el de Google),</li>
<li>Tindre creat un projecte (a l&rsquo;exemple li hem posat <em>Pelis El Just</em>, però podeu utilitzar el què volgueu),</li>
<li>Tindre creada al projecte la base de dades, i el contingut importat del JSON que se us facilitarà (us penge una versió nova, perquè a l&rsquo;anterior, hi havia logotips de les pel·lícules en format SVG, i Flutter no renderitza directament un svg com a Image; ara utilitzarem els cartells de les pel·lícules, però el camp al JSON es dirà <em>logo</em> igualment.) <strong>Assegureu-vos que la base de dades si és en mode test es puga llegir fins que s&rsquo;acabe l&rsquo;avaluació, pel que puga passar!</strong></li>
<li>També necessitarem tindre activada l&rsquo;autenticació mitjançant Google. Al <a href="https://github.com/DAMElJust/MultiplataformaWeb/blob/main/fonts/7_Firebase_Capacitor.md#autenticaci%C3%B3">final del document anterior a Github</a> se us explica com fer-ho.</li>
</ul>
<h2 id="començant-laplicació-amb-flutter">Començant l&rsquo;aplicació amb Flutter</h2>
<p>En primer lloc, creeu una aplicació buida amb Flutter, però en lloc de fer-ho mitjançant l&rsquo;IDE, anem a fer-ho des de la terminal, de manera que puguem especificar alguns paràmetres més, com el nom del paquet que necessitarem per configurar l&rsquo;aplicació en Firebase.</p>
<p>Així doncs, des de la línia d&rsquo;ordres escriurem:</p>
<pre><code>flutter create --ios-language swift --android-language kotlin --org com.ieseljust.pmdm pelisflutter
</code></pre><p>Com veiem, és semblant a com ho crea automàticament el plugin de Flutter per a VSCode, però afegint el nom del paquet amb <code>--org com.ieseljust.pmdm</code>. D&rsquo;aquesta manera, l&rsquo;aplicació per a Firebase que haurem de configurar després es dirà <em>com.ieseljust.pmdm.pelisflutter</em> (o el nom de paquet+aplicació que hajam indicat al crear el paquet.)</p>
<p>Amb això tindrem l&rsquo;estructura d&rsquo;un projecte bàsic creada.</p>
<h3 id="afegint-firebase-a-la-nostra-aplicació">Afegint Firebase a la nostra aplicació</h3>
<p>Al document <a href="https://firebase.google.com/docs/flutter/setup?hl=es">Agrega Firebase a tu app de Flutter</a> ens diu com afegir Firebase als nostres projectes amb Flutter. Podem triar la plataforma amb la què connectar-nos, si serà Android o iOS (per defecte triarem Android).</p>
<p>Una vegada tinguem creat el projecte a Firebase passarem <a href="https://firebase.google.com/docs/flutter/setup?hl=es&platform=android#register-app">al pas 2 d&rsquo;aquesta guia</a>, per registrar l&rsquo;aplicació. Bàsicament, haurem d&rsquo;afegir una <em>app</em> d&rsquo;Android al projecte fent ús del nom d&rsquo;aplicació (<em>com.ieseljust.pmdm.firebase</em> al meu cas). Per altra banda, <strong>haureu d&rsquo;incorporar les claus SHA1 per autenticar el client. A l&rsquo;Annex 1 d&rsquo;aquest document teniu explicat com obtenir aquestes claus!</strong>.</p>
<p>Una vegada registrada, i amb les claus SHA-1 configurades, descarregarem el fitxer <em>google-services.json</em> i el guardem a la carpeta <code>android/app</code> de la nostra aplicació Flutter, i seguim els següents passos indicats a la guía:</p>
<ul>
<li>
<p>Afegim el complement <em>google-services</em> als fitxers de Gradle i habilitem els serveis de Firebase en l&rsquo;aplicació. Per a això:</p>
<ul>
<li>Modifiquem el fitxer <code>android/build.gradle</code> <strong>arrel</strong> i ens assegurem que estiga o afegim el següent contingut:</li>
</ul>
</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-groovy" data-lang="groovy">buildscript <span style="color:#f92672">{</span>

    repositories <span style="color:#f92672">{</span>
      <span style="color:#75715e">// Comprovem que estiga el repositori de Google
</span><span style="color:#75715e"></span>      google<span style="color:#f92672">()</span> 
    <span style="color:#f92672">}</span>

    dependencies <span style="color:#f92672">{</span>
      <span style="color:#75715e">// Afegim la dependència del plugin de Google Services
</span><span style="color:#75715e"></span>      classpath <span style="color:#e6db74">&#39;com.google.gms:google-services:4.3.4&#39;</span> 
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>

allprojects <span style="color:#f92672">{</span>
    
    repositories <span style="color:#f92672">{</span>
      <span style="color:#75715e">// Comprovem que estiga el repositori Maven de Google 
</span><span style="color:#75715e"></span>      <span style="color:#75715e">// per a tots els projectes
</span><span style="color:#75715e"></span>      google<span style="color:#f92672">()</span>
    <span style="color:#f92672">}</span>
<span style="color:#f92672">}</span>
</code></pre></div><ul>
<li>I en el fitxer de configuració <em>build.gradle</em> <strong>a nivell d&rsquo;aplicació</strong> (<code>android/app/build.gradle</code>) afegirem el complement dels serveis de Google:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-groovy" data-lang="groovy">    apply plugin: <span style="color:#e6db74">&#39;com.google.gms.google-services&#39;</span> 

    android <span style="color:#f92672">{</span>
      <span style="color:#75715e">// ...
</span><span style="color:#75715e"></span>    <span style="color:#f92672">}</span>
</code></pre></div><p>Amb això tenim configurada la part d&rsquo;Android de l&rsquo;aplicació per a que accedisca als serveis de Google. En estos moments podem actualitzar i descarregar els paquets amb <code>flutter packages get</code>, però anem a afegir els complements de Flutter que ens falten i descarregarem després tots els paquets.</p>
<p>Així que ara, afegim com a <strong>dependències al nostre projecte Flutter</strong> el nucli de Firebase (<a href="https://pub.dev/packages/firebase_core),">https://pub.dev/packages/firebase_core),</a> com a base per a utilitzar qualsevol altra funcionalitat, la base de dades en temps real (<a href="https://pub.dev/packages/firebase_database">https://pub.dev/packages/firebase_database</a>) i l&rsquo;autenticació (<a href="https://pub.dev/packages/firebase_auth">https://pub.dev/packages/firebase_auth</a>) a través del compte de Google (<a href="https://pub.dev/packages/google_sign_in)">https://pub.dev/packages/google_sign_in)</a>.</p>
<p>Per tant, fitxer <em>pubspec.yaml</em>, afegirem les dependències corresponents:</p>
<pre><code>dependencies:
  flutter:
    sdk: flutter
  firebase_core: ^0.7.0
  firebase_database: ^6.0.0
  firebase_auth: ^0.20.0+1
  google_sign_in: ^4.5.9
</code></pre><p>Fet açò, ara sí que estarem en disposició de descarregar tots els paquets, tant els que hem configurat específics per a Android (o si ho hem inclòs també per a iOS) i els complements de Flutter:</p>
<pre><code>$ flutter packages get
</code></pre><p>Amb açò tenim ja l&rsquo;aplicació configurada per utilitzar Firebase.</p>
<h2 id="autenticació">Autenticació</h2>
<p>Comencem ha amb el desenvolupament en sí de l&rsquo;aplicació. En primer lloc, anem a començar per l&rsquo;autenticació. Per a això, agafarem com a base l&rsquo;article <a href="https://blog.codemagic.io/firebase-authentication-google-sign-in-using-flutter/">Google sign-in &amp; Firebase authentication using Flutter</a>.</p>
<p>Els pasos en general que haurem de fer serà:</p>
<ol>
<li>Creació de la carpteta d'<code>assets</code> amb els recursos que utilitzarà l&rsquo;aplicació, i ubicar allí el logotipus de Google i el de la pròpia aplicació (no és necessari que utilitzeu el mateix logo de l&rsquo;exemple, podem fer el logo que volguem per a la nostra aplicació). Una vegada feta, recordeu d&rsquo;habilitar la carpeta d&rsquo;assets al fitxer <em>pubspec.yaml</em> amb:</li>
</ol>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">flutter</span>:
  <span style="color:#f92672">assets</span>:
    - <span style="color:#ae81ff">assets/</span>
</code></pre></div><ol start="2">
<li>En segon lloc, anem a crear la interfície d&rsquo;usuari. Per a això, anem a dividir la interfície i la funcionalitat de login en tres fitxers:</li>
</ol>
<ul>
<li>El fitxer <em>lib/main.dart</em>, que serà el fitxer que llançarà l&rsquo;aplicació, tindrà el següent contingut de base, on definirem el widget sense estat <em>MyApp</em>, que serà una aplicació Material (tematitzeula com més us agrade), i tindrà com a <em>home</em> el widget <em>LoginPage</em>, que definirem en altre fitxer.</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dart" data-lang="dart"><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;package:flutter/material.dart&#39;</span>;

<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;login_page.dart&#39;</span>;

<span style="color:#66d9ef">void</span> main() <span style="color:#f92672">=&gt;</span> runApp(MyApp());

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyApp</span> <span style="color:#66d9ef">extends</span> StatelessWidget {
  <span style="color:#960050;background-color:#1e0010">@</span>override
  Widget build(BuildContext context) {
    <span style="color:#66d9ef">return</span> MaterialApp(
      title: <span style="color:#e6db74">&#39;Flutter Login&#39;</span>,
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: LoginPage(),
    );
  }
}

</code></pre></div><ul>
<li>El fiter nou <em>lib/login_page.dart</em> tindrà el següent contingut de base, que bàsicament organitza en una columna el logotipus de l&rsquo;aplicació i el botó de login (que serà implementat pel widget <code>_signInButton</code>):</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dart" data-lang="dart"><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;package:flutter/material.dart&#39;</span>;

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">LoginPage</span> <span style="color:#66d9ef">extends</span> StatefulWidget {
  <span style="color:#960050;background-color:#1e0010">@</span>override
  _LoginPageState createState() <span style="color:#f92672">=&gt;</span> _LoginPageState();
}

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">_LoginPageState</span> <span style="color:#66d9ef">extends</span> State<span style="color:#f92672">&lt;</span>LoginPage<span style="color:#f92672">&gt;</span> {
  <span style="color:#960050;background-color:#1e0010">@</span>override
  Widget build(BuildContext context) {
    <span style="color:#66d9ef">return</span> Scaffold(
      body: Container(
        color: Colors.white,
        child: Center(
          child: Column(
            mainAxisSize: MainAxisSize.max,
            mainAxisAlignment: MainAxisAlignment.center,
            children: <span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>[
              FlutterLogo(size: <span style="color:#ae81ff">150</span>),
              SizedBox(height: <span style="color:#ae81ff">50</span>),
              _signInButton(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _signInButton() {
    <span style="color:#66d9ef">return</span> OutlineButton(
      splashColor: Colors.grey,
      onPressed: () {},
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(<span style="color:#ae81ff">40</span>)),
      highlightElevation: <span style="color:#ae81ff">0</span>,
      borderSide: BorderSide(color: Colors.grey),
      child: Padding(
        padding: <span style="color:#66d9ef">const</span> EdgeInsets.fromLTRB(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>, <span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">10</span>),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: <span style="color:#f92672">&lt;</span>Widget<span style="color:#f92672">&gt;</span>[
            Image(image: AssetImage(<span style="color:#e6db74">&#34;assets/google_logo.png&#34;</span>), height: <span style="color:#ae81ff">35.0</span>),
            Padding(
              padding: <span style="color:#66d9ef">const</span> EdgeInsets.only(left: <span style="color:#ae81ff">10</span>),
              child: Text(
                <span style="color:#e6db74">&#39;Sign in with Google&#39;</span>,
                style: TextStyle(
                  fontSize: <span style="color:#ae81ff">20</span>,
                  color: Colors.grey,
                ),
              ),
            )
          ],
        ),
      ),
    );
  }

}

</code></pre></div><p>Amb això podriem vore la pàgina de login. Ara ens queda afegir la pàgina que realitza el login en sí, que anomenarem sign_in.dart, i que tindrà el següent contingut:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dart" data-lang="dart"><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;package:firebase_auth/firebase_auth.dart&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;package:firebase_core/firebase_core.dart&#39;</span>;
<span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;package:google_sign_in/google_sign_in.dart&#39;</span>;

<span style="color:#66d9ef">final</span> FirebaseAuth _auth <span style="color:#f92672">=</span> FirebaseAuth.instance;
<span style="color:#66d9ef">final</span> GoogleSignIn googleSignIn <span style="color:#f92672">=</span> GoogleSignIn();

Future<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">String</span><span style="color:#f92672">&gt;</span> signInWithGoogle() <span style="color:#66d9ef">async</span> {
  <span style="color:#66d9ef">await</span> Firebase.initializeApp();

  <span style="color:#66d9ef">final</span> GoogleSignInAccount googleSignInAccount <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> googleSignIn.signIn();
  <span style="color:#66d9ef">final</span> GoogleSignInAuthentication googleSignInAuthentication <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> googleSignInAccount.authentication;

  <span style="color:#66d9ef">final</span> AuthCredential credential <span style="color:#f92672">=</span> GoogleAuthProvider.credential(
    accessToken: googleSignInAuthentication.accessToken,
    idToken: googleSignInAuthentication.idToken,
  );

  <span style="color:#66d9ef">final</span> UserCredential authResult <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> _auth.signInWithCredential(credential);
  <span style="color:#66d9ef">final</span> User user <span style="color:#f92672">=</span> authResult.user;

  <span style="color:#66d9ef">if</span> (user <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span>) {
    <span style="color:#66d9ef">assert</span>(<span style="color:#f92672">!</span>user.isAnonymous);
    <span style="color:#66d9ef">assert</span>(<span style="color:#66d9ef">await</span> user.getIdToken() <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span>);

    <span style="color:#66d9ef">final</span> User currentUser <span style="color:#f92672">=</span> _auth.currentUser;
    <span style="color:#66d9ef">assert</span>(user.uid <span style="color:#f92672">==</span> currentUser.uid);

    print(<span style="color:#e6db74">&#39;signInWithGoogle succeeded: </span><span style="color:#e6db74">$</span>user<span style="color:#e6db74">&#39;</span>);

    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#39;</span><span style="color:#e6db74">$</span>user<span style="color:#e6db74">&#39;</span>;
  }

  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span>;
}

Future<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">void</span><span style="color:#f92672">&gt;</span> signOutGoogle() <span style="color:#66d9ef">async</span> {
  <span style="color:#66d9ef">await</span> googleSignIn.signOut();

  print(<span style="color:#e6db74">&#34;User Signed Out&#34;</span>);
}
</code></pre></div><p>Aquest codi està extret pràcticament de l&rsquo;article de base, així que tindrà funcionalitats, com el <em>signOutGoogle()</em> que de moment no utilitzarem.</p>
<h2 id="accés-a-la-base-de-dades">Accés a la base de dades</h2>
<p>Per a l&rsquo;accés a la base de dades, tindrem com a referència l&rsquo;article <a href="https://medium.com/flutterdevs/explore-realtime-database-in-flutter-c5870c2b231f">Explore Realtime Database In Flutter</a> de Shaiq khan.</p>
<p>Abans de començar, ens hem d&rsquo;assegurar que tenim activat AndroidX en el projecte (sol estar activat per defecte). Així que ens assegurem que el fitxer <code>android/gradle.properties</code> conté:</p>
<pre><code>org.gradle.jvmargs=-Xmx1536M
android.enableR8=true
android.useAndroidX=true
android.enableJetifier=true
</code></pre><p>Per a aquesta part, s&rsquo;aconsella implentar dos fitxers, un <code>lib/pelis_screen.dart</code> amb la interfície d&rsquo;usuari, i altre <code>lib/db_model.dart</code>, que serà la classe encarregada d&rsquo;accedir a la base de dades de Firebase i proporcionar-nos la informació.</p>
<h3 id="implementació-de-laccés-a-la-base-de-dades">Implementació de l&rsquo;accés a la base de dades</h3>
<p>En primer lloc, haurem d&rsquo;importar la llibrería de la BD de Firebase:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dart" data-lang="dart"><span style="color:#66d9ef">import</span> <span style="color:#e6db74">&#39;package:firebase_database/firebase_database.dart&#39;</span>;
</code></pre></div><p>I per tal de poder operar amb la base de dades, necessitem una instància de la classe <code>DataBaseReference</code>, que ens ofereix <code>FirebaseDatabase.instance.reference()</code>. Una referència a Firebase representa una localització concreta de la base de dades (recordem que la BD d&rsquo;esmmagatzema de forma jeràrquica), a partir de la qual podem llegir i escriure dades.</p>
<p>Aquesta classe <em>DataBaseReference</em> serà el punt d&rsquo;entrada a totes les operacions sobre la base de dadees.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dart" data-lang="dart"><span style="color:#66d9ef">final</span> databaseReference <span style="color:#f92672">=</span> FirebaseDatabase.instance.reference();
</code></pre></div><p>Amb això, obtenim una referència a una instància de la base de dades en un moment donat. Tal i com es comenta a l&rsquo;article, per obtindre un <em>Snaphot</em> o una <em>foto</em> fem:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dart" data-lang="dart"><span style="color:#66d9ef">void</span> readData(){
  databaseReference.once().then((DataSnapshot snapshot) {
    print(<span style="color:#e6db74">&#39;Data : </span><span style="color:#e6db74">${</span>snapshot.value<span style="color:#e6db74">}</span><span style="color:#e6db74">&#39;</span>);
  });
}
</code></pre></div><p>Què fa aquest codi? Amb <code>databaseRefernce.once()</code> llig el contingut de la base de dades. Aquesta, és una funció asíncrona, per això, utilitza el <code>then</code>; per tal d&rsquo;especificar el <em>callback</em> que s&rsquo;executarà una vegada s&rsquo;obtinguen les dades. Aquest <em>callback</em> rebrà un objecte de tipus <em>DataSnapshot</em>, que contindrà el resultat en <code>snapshot.value</code>. <strong>Compte si quan obteniu les dades voleu recarregar l&rsquo;aplicació, que no ho podeu fer amb un simple <em>hot reload</em>, ja que el mètode <code>once()</code> llig la BD només una vegada, pel que haureu de fer, al menys un <em>hot restart</em></strong>.</p>
<p>Per fer-ho fàcil, podríem utilitzar aquest codi directament sobre la interfície, però volem separar l&rsquo;accés a la base de dades de la presentació. Per això, aquesta funcionalitat s&rsquo;implementarà en una funció o mètode en un fitxer/classe separat, i ens haurà de retornar una cosa semblant al següent:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dart" data-lang="dart"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">DbModel</span> {
  <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> databaseReference <span style="color:#f92672">=</span> FirebaseDatabase.instance.reference();
  
  <span style="color:#66d9ef">static</span> Future<span style="color:#f92672">&lt;</span>List<span style="color:#f92672">&lt;</span><span style="color:#66d9ef">dynamic</span><span style="color:#f92672">&gt;&gt;</span> getData() <span style="color:#66d9ef">async</span> {
    <span style="color:#66d9ef">var</span> ret<span style="color:#f92672">=</span><span style="color:#66d9ef">await</span> databaseReference.once();
    <span style="color:#66d9ef">return</span> ret.value[<span style="color:#e6db74">&#39;pelis&#39;</span>];
  }
  ...
}
</code></pre></div><p>Aquest codi, ofereix el mètode estàtic <code>getData</code> per obtenir la informació de la base de dades, però podria tractar-se d&rsquo;una funció que no estiguera inclosa en cap classe. <strong>El que sí que ha de retornar és un <code>Future&lt;List&lt;dynamic&gt;&gt;</code>, i estar definida com a <code>async</code>, ja que dins anem a utilitzar un <code>await</code></strong></p>
<p>Dins la funció, el que fem és carregar amb <code>once()</code> el contingut de la BD i esperar-nos a obtindre&rsquo;l, de manera que una vegada el tenim, retornem la clau <code>pelis</code> del resultat, que conté la llista de les pel·lícules (per això el tipus és <code>&lt;List&lt;dynamic&gt;&gt;)</code>.</p>
<p>Per tal de <em>pintar</em> la interfície, com que obtindrem la informació necessària de forma asíncrona, necessitarem un <em>widget</em> de tipus <code>FutureBuilder</code>, amb els següents arguments:</p>
<ul>
<li>Com a <code>future</code>, utilitzarem la funció o mètode <em>getData</em> anterior, segons com ho hajam implementat,</li>
<li>dins <code>builder</code> (<code>builder: (BuildContext context, AsyncSnapshot snapshot){...}</code>), utilitzarem <code>snapshot.hasData</code> per detectar si es tenen valors i generar el <em>ListView</em> amb les targetes corresponents (el millor seria crar-vos un widget personalitzat per a les <em>Cards</em>), i si no té dades, retornar un indicador de progrés, com hem fet als exemples. En aquest cas, una vegada obtinguda la llista de pel·lícules, sí que necessitarme incidar-li al <em>ListView</em> la longitud. Per obtindre-la, podem fer-ho a partir de l'<code>snapshot</code>:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dart" data-lang="dart">  <span style="color:#66d9ef">var</span> values <span style="color:#f92672">=</span> snapshot.data;
  <span style="color:#66d9ef">var</span> longitud <span style="color:#f92672">=</span> values.length;
</code></pre></div><h2 id="consideracions-finals-i-possibles-ampliacions">Consideracions finals i possibles ampliacions</h2>
<ul>
<li>Podeu aplicar la tematització i els dissenys dels widgets que desitgeu, l&rsquo;aspecte final no ha deser necessàriament el que es mostra a les imatges de l&rsquo;enunciat.</li>
</ul>
<p>Si desitgeu aprofundir més en Firebase i Flutter, podeu incorporar les següents millores:</p>
<ul>
<li>Incorporar el nom de l&rsquo;usuari que us proporciona Google a la barra de l&rsquo;aplicació,</li>
<li>Afegir en aquesta mateixa barra la seua imatge de perfil, proporcionada també per Google,</li>
<li>Afegir un botó de <em>logout</em> per tancar la sessió i tornar a la pantalla inicial.</li>
<li>Qualsevol altra cosa que considereu interessant.. si se m&rsquo;ocorre alguna altra millora més avant, també us la indicaré pel fòrum.</li>
</ul>
<h2 id="annex-1-autenticació-de-laplicació-client">Annex 1. Autenticació de l&rsquo;aplicació client</h2>
<p>Quan llancem un projecte en mode Debug i no tenim claus SHA pujades a Firebase per autenticar el client, segurament trobarem el següent error d&rsquo;execució quan intentem utilitzar l&rsquo;autenticació.</p>
<pre><code>E/flutter (26489): [ERROR:flutter/lib/ui/ui_dart_state.cc(177)] Unhandled Exception: PlatformException(sign_in_failed, com.google.android.gms.common.api.ApiException: 10: , null, null)
</code></pre><p>Aquest problema <a href="https://stackoverflow.com/questions/54557479/flutter-and-google-sign-in-plugin-platformexceptionsign-in-failed-com-google">es troba descrit a StackOverflow</a>, i la solució passa per pujar una clau SHA al projecte.</p>
<p>Tal i com es comenta a la documentació <a href="https://developers.google.com/android/guides/client-auth">Authenticating Your Client</a>, determinats serveis de <em>Google Play Services</em> com el <em>Google Sign In</em> que utilitzem, requereix d&rsquo;una clau SHA-1 del certificat d&rsquo;accés per tal de crear un client d&rsquo;autenticació OAuth2 i una clau API per a l&rsquo;aplicació d&rsquo;Android.</p>
<p>Per tal d&rsquo;obtenir el <em>fingerprint</em> de la clau des de la terminal, farem ús de la utilitat <em>keytool</em> de Java:</p>
<pre><code>$ keytool -list -v -alias androiddebugkey -keystore ~/.android/debug.keystore
Enter keystore password:  
</code></pre><p>Aquesta clau sol ser bé <em>android</em> o la cadena buida.</p>
<p>El resultat que obtindrem serà semblant al següent:</p>
<pre><code>Alias name: androiddebugkey
Creation date: 1 d’oct. 2020
Entry type: PrivateKeyEntry
Certificate chain length: 1
Certificate[1]:
Owner: C=US, O=Android, CN=Android Debug
Issuer: C=US, O=Android, CN=Android Debug
Serial number: 1
Valid from: Thu Oct 01 12:02:05 CEST 2020 until: Sat Sep 24 12:02:05 CEST 2050
Certificate fingerprints:
         SHA1: 12:34:56:78:9A:AB:BC:CD:EF:1A:2A:2A:4A:5A:6A:7A:8A:9A:1B:B2
         SHA256: 12:34:56:78:9A:AB:BC:CD:EF:1A:2A:2A:4A:5A:6A:7A:8A:9A:1B:B2:12:34:56:78:9A:AB:BC:CD:EF:1A:2A:2A
Signature algorithm name: SHA1withRSA (weak)
Subject Public Key Algorithm: 2048-bit RSA key
Version: 1
...
</code></pre><p>De tota aquest eixida, ens interessa la línia:</p>
<pre><code>SHA1: 12:34:56:78:9A:AB:BC:CD:EF:1A:2A:2A:4A:5A:6A:7A:8A:9A:1B:B2
</code></pre><p>Aquesta és la clau que haurem de pujar a la consola:</p>
<p><img src="../img/sha.png" alt="Pujant claus SHA1"></p>
<p>Donem a guardar, i ja podem descarregar el fitxer <code>google-services.json</code> ben configurat.</p>
<h2 id="annex-2-errors-amb-el-nom-de-laplicació">Annex 2. Errors amb el nom de l&rsquo;aplicació</h2>
<p>És possible que en executar l&rsquo;aplicació, a l&rsquo;hora de fer l&rsquo;autenticació ens aparega el següent error:</p>
<pre><code>FAILURE: Build failed with an exception.                                
                                                                        
* What went wrong:                                                      
Execution failed for task ':app:processDebugGoogleServices'.            
&gt; No matching client found for package name 'com.ieseljust.pmdm.pelisflutter'
                                                                        
* Try:                                                                  
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.
                                                                        
* Get more help at https://help.gradle.org                              
                                                                        
BUILD FAILED in 23s                                                     
Running Gradle task 'assembleDebug'...                                  
Running Gradle task 'assembleDebug'... Done                        23,8s
Exception: Gradle task assembleDebug failed with exit code 1
</code></pre><p>El que vol dir que <strong>el nom d&rsquo;aplicació registrat a Firebase no concorda amb el de la nostra aplicació</strong>. Caldrà verificar que l&rsquo;Id d&rsquo;aplicació que tenim especificat al fitxer de configuració de Gradle per a l&rsquo;aplicació (<em>android/app/build.gradle</em>), dins la configuració per defecte:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-groovy" data-lang="groovy">defaultConfig <span style="color:#f92672">{</span>
        <span style="color:#f92672">...</span>
        applicationId <span style="color:#e6db74">&#34;com.ieseljust.pmdm.pelisflutter&#34;</span>
        <span style="color:#f92672">...</span>
        <span style="color:#f92672">}</span>
</code></pre></div><p>Aparega com a aplicació client al fitxer <em>google-services.json</em> descarregat:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-groovy" data-lang="groovy">   <span style="color:#e6db74">&#34;client_info&#34;</span><span style="color:#f92672">:</span> <span style="color:#f92672">{</span>
        <span style="color:#f92672">...</span>
        <span style="color:#e6db74">&#34;android_client_info&#34;</span><span style="color:#f92672">:</span> <span style="color:#f92672">{</span>
          <span style="color:#e6db74">&#34;package_name&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;com.ieseljust.pmdm.pelisflutter&#34;</span>
          <span style="color:#f92672">...}</span>
        <span style="color:#f92672">...}</span>
</code></pre></div><p>Si no és així, comprovem que el nom de l&rsquo;aplicació està correctament especificat a Firebase, i una vegada fetes les modificacions, podem tornar a descarregar el fitxer <em>google-services.json</em> i reincorporar-lo al projecte.</p>

        </article>
<aside class="table-of-contents">
    <nav id="TableOfContents">
  <ul>
    <li><a href="#introducció">Introducció</a></li>
    <li><a href="#punt-de-partida">Punt de partida</a></li>
    <li><a href="#començant-laplicació-amb-flutter">Començant l&rsquo;aplicació amb Flutter</a>
      <ul>
        <li><a href="#afegint-firebase-a-la-nostra-aplicació">Afegint Firebase a la nostra aplicació</a></li>
      </ul>
    </li>
    <li><a href="#autenticació">Autenticació</a></li>
    <li><a href="#accés-a-la-base-de-dades">Accés a la base de dades</a>
      <ul>
        <li><a href="#implementació-de-laccés-a-la-base-de-dades">Implementació de l&rsquo;accés a la base de dades</a></li>
      </ul>
    </li>
    <li><a href="#consideracions-finals-i-possibles-ampliacions">Consideracions finals i possibles ampliacions</a></li>
    <li><a href="#annex-1-autenticació-de-laplicació-client">Annex 1. Autenticació de l&rsquo;aplicació client</a></li>
    <li><a href="#annex-2-errors-amb-el-nom-de-laplicació">Annex 2. Errors amb el nom de l&rsquo;aplicació</a></li>
  </ul>
</nav>

</aside>

<script>

    (function () {
        let entries = document.querySelectorAll(".table-of-contents li");

        for (entry of entries) {
            entry.addEventListener("click", function (e) {
                
                e.stopPropagation();
                for (sel of document.querySelectorAll(".selected"))
                    sel.classList.remove("selected");
                e.currentTarget.classList.add("selected");
                
                for (item of e.currentTarget.children)
                    if (item == "[object HTMLUListElement]")
                        if (item.style.display == "none")
                            item.style.display = "block";
                        else item.style.display = "none"

            });
        }

    
    let entriesh2 = document.querySelectorAll(".table-of-contents li > ul");

        for (entry of entriesh2) {
            entry.style.display = "none";
        }


    })();

</script>        

</div> 

<div class="footer-container">
    
</div>
</body>

</html>