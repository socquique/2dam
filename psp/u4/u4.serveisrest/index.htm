<!DOCTYPE html>
<html lang="ca">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    
    <link rel="stylesheet" href="../../../../css?family=Noto+Sans+JP">
    <link rel="stylesheet" href="../../../css/main.css">

    
    <title>Unitat 3. Comunicació entre processos.</title>
</head>

<body>
    
    <div class="header-container">
        
        
        
        
        
    </div>

    
    <div class="main-container">
<nav>
    <h3>
        <a href="../index.htm">
        Unitat 4. Serveis REST</a>
    </h3>
    
        
        
        <div class="unitat">
            <a href="index.htm">Unitat 3. Comunicació entre processos.</a>
        </div>
        
    
</nav>
    <article>
        <header> 
            <h1>Unitat 3. Comunicació entre processos.</h1>
        </header>
        <h2 id="1-serveis-dinternet">1. Serveis d&rsquo;Internet</h2>
<p>Internet, o el conjunt de clients i servidors interconnectats amb les aplicacions i protocols que formen <em>el núvol</em> es basen en el protocol TCP/IP. El protocol d&rsquo;Internet (IP) ens proporcionava un mecanisme per interconnectar xarxes heterogènies (inter-net), i estableix les adreces IP com un mecanisme per identificar els hosts. Per la seua banda, TCP (i UDP) són els protocols de transport d&rsquo;informació, i connecten clients i servidors amb <em>circuits virtuals</em>. Estos protocols ofereixen el mecanisme dels ports, adreces de 16 bits, per tal d&rsquo;identificar els serveis en un servidor. Els serveis més habituals en Internet, i els seus ports són:</p>
<ul>
<li>El servei <strong>web</strong>, basat en el protocol HTTP, sobre el port 80, i l&rsquo;HTTPS sobre el port 443,</li>
<li>El servei de <strong>correu electrònic</strong>, basat en els protocols 25 (SMTP), POP3 (port 110) i IMAP (PORT 143),</li>
<li>El servei de <strong>connexió segura</strong>, basat en el protocol SSH (port 22),</li>
<li>El servei de <strong>transferència de fitxer</strong>, basat en FTP (ports 20 i 21)</li>
</ul>
<p>Quan un servei no utilitza el port per defecte, caldrà incloure el port en l&rsquo;adreça: <code>http://servidor:port</code></p>
<p>Per altra banda, la forma d&rsquo;identificar recursos a través d&rsquo;Internet és la <strong>URI</strong> (<em>Uniform Resource Identifier</em>), o servei d&rsquo;identificador d&rsquo;un recurs (recurs=servei) d&rsquo;Internet. Aquest mecanisme es troba definit <a href="http://tools.ietf.org/html/rfc3986">al RFC 3986</a>, del 2005.</p>
<p>Dins de l&rsquo;URI, distingim entre <em>URL</em> i <em>URN</em>. Ens centrarem en el primer que és el que utilitzem habitualment</p>
<ul>
<li>
<p><strong>URL</strong>: <em>Uniform Resource Locator</em>, que és l&rsquo;adreça física del recurs, incloen el servidor on s&rsquo;emmagatzema i la ruta fins arribar a ell. El format habitual és:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;esquema:&gt;</span>//[<span style="color:#f92672">&lt;usuari&gt;</span>@]<span style="color:#f92672">&lt;host&gt;</span>[<span style="color:#f92672">&lt;:port&gt;</span>][<span style="color:#f92672">&lt;path&gt;</span>][<span style="color:#960050;background-color:#1e0010">&lt;</span>?consulta&gt;][<span style="color:#960050;background-color:#1e0010">&lt;</span>#ancora&gt;]
</code></pre></div><ul>
<li><strong><code>&lt;esquema:&gt;</code></strong>: protocol o esquema d&rsquo;accés al recurs (http, https, ftp, etc.)</li>
<li><strong><code>[&lt;usuari&gt;@]&lt;host&gt;[&lt;:port&gt;]</code></strong>: Cadena d&rsquo;autenticació, formada per l&rsquo;usuari (opcional), el host al què ens connectem, i el port (si és necessari).</li>
<li><strong><code>[&lt;path&gt;]</code></strong>: El camí que identifica el recurs al servidor</li>
<li><strong><code>[&lt;?consulta&gt;]</code></strong>: Es tracta dels paràmetres que enviem al recurs,</li>
<li><strong><code>[&lt;ancora&gt;]</code></strong>: Fa referència a un fragmento part del recurs</li>
</ul>
</li>
</ul>
<h3 id="11-el-protocol-http">1.1. El protocol HTTP</h3>
<p>El protocol HTTP és n protocol transaccional d&rsquo;accés a recursos, el que vol dir que es compon de <em>transaccions HTTP</em>, formades per sol·licituds i respostes, independents entre elles. Els mètodes HTTP o tipus de sol·licitud són principalment quatre: GET, POST, PUT i DELETE.</p>
<p>Una sol·licitud <em>HTTP GET</em> presenta un format semblant al següent, format per tres parts: la primera línia amb la petició, uns paràmetres de capçalera i el cos:</p>
<pre><code>GET /recurs HTTP/1.1        (Acaba amb \n\n)

Host: nom_del_host
Accept: text/*, image/*     (tipus MIME en general, formats per tipus/subtipus)URN
User-Agent: Navegador
...

</code></pre><p>I la resposta, té un format similar: Primera línia amb la resposta, la capçalera i el cos.</p>
<pre><code>HTTP:/1.1. 200 OK           (codi de retorn)
Server: Tipus de servidor
Content-type: text/JSON     (tipus de dada de retorn)
Content-length: longitud 
...

</code></pre><p>Els codis d&rsquo;estat que ens pot tornar una resposta HTTP més destacats són:</p>
<ul>
<li><strong>Respostes informatives (1xx)</strong></li>
<li><strong>Sol·licituds finalitzades (2xx)</strong>
<ul>
<li><strong>200 OK</strong>: Sol·licitud <code>GET</code> realitzada amb èxit</li>
<li><strong>201 Created</strong>: Recurs creata amb <code>POST</code> o <code>PUT</code>.</li>
<li><strong>206 Partial Content</strong>: Per a ús amb <code>GET</code> parcial.</li>
</ul>
</li>
<li><strong>Redirecció (3xx)</strong></li>
<li><strong>Error de client (4xx)</strong>
<ul>
<li><strong>400 Bad Request</strong>: La petició és incorrecta</li>
<li><strong>404 Not Found</strong>: No s&rsquo;ha trobat el recurs</li>
<li><strong>405 Methot Not Allowed</strong>: Mètode no permès</li>
<li><strong>409 Conflict</strong> i <strong>410 Gone</strong>: El recurs ja no està,</li>
</ul>
</li>
<li><strong>Error de servidor (5xx)</strong>:
<ul>
<li><strong>500 Internal Server Error</strong>: El servidor ha tingut algun error, com puga ser una lectura de disc fallida.</li>
</ul>
</li>
</ul>
<p>Els mètodes més importants d&rsquo;HTTP, també coneguts com verbs o ordres ens proporcionen una interfície uniforme o CRUD, en llenguatge de bases de dades:</p>
<ul>
<li><strong>POST</strong>: Crea un recurs al servidor (<strong>C</strong>reate),</li>
<li><strong>GET</strong>: Demana un recurs al servidor (<strong>R</strong>ead),</li>
<li><strong>PUT</strong>: Modifica un recurs del servidor (<strong>U</strong>pdate),</li>
<li><strong>DELETE</strong>: Esborra un recurs del servidor (<strong>D</strong>elete)</li>
</ul>
<p>Existeixen molts altres mètodes, però els més importants són aquests quatre.</p>
<h3 id="12-serveis-web">1.2. Serveis web</h3>
<p>Un servidor web és un programa que resideix a la màquina que fa el paper de servidor i serveix recursos web mitjançant peticions HTTP de tipus GET. Els diferents recursos web s&rsquo;identifiquen amb una URL. Cal dir que les URL web només porten associat el mètode <strong>GET</strong> del protocol HTTP (no podem afegir o modificar pàgines web en un servidor a través de la URL).</p>
<p>Generalment, el servidor web reserva un directori per emmagatzemar els recursos web a servir, els fitxers i directoris del qual són accessibles a través de peticions HTTP de tipus GET. Generalment, els servidors solen disposar d&rsquo;una pàgina <em>index.html</em> (o <em>index.htm</em>, <em>index.php</em>, etc) que fa de <em>pàgina d&rsquo;índex o per defecte</em>, de manera que no cal incloure el nom del document a l&rsquo;URL.</p>
<p>El funcionament del servidor web és senzill. Quan aquest rep una petició HTTP de tipus GET, busca el recurs, i si aquest existeix, l&rsquo;envía en la resposta, junt amb el codi &ldquo;200 OK&rdquo;, establint el paràmetre &ldquo;<em>Content-Type: text/html</em>&rdquo; o el tipus MIME què es tracte el recurs. Si no troba el recurs, es respon amb el missatge d&rsquo;error corresponent.</p>
<h2 id="2-express">2. Express</h2>
<p>Express <a href="http://expressjs.com">http://expressjs.com</a> és un framework que ens permet crear serveis web amb <em>nodejs</em>, que siguen accessibles per HTTP. Una aplicació <em>Express</em>, serà doncs un programa en Javascript que respon a peticions HTTP.</p>
<p>Les aplicacions express es construeixen mitjançant <em>middlewares</em> (MWs), que són diverses funcions que s&rsquo;instal·len en una aplicació express.</p>
<h3 id="21-el-middleware-static">2.1. El middleware Static</h3>
<p>Anem a veure com crear un servidor web senzill amb <em>nodejs</em>, <em>Express</em>, i el middleware <em>Static</em> per tal de servir documents HTML estàtics, fulls CSS, script en js o imatges.</p>
<p>En primer lloc, crearem el nostre projecte de servidor web:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See <span style="color:#e6db74">`</span>npm help init<span style="color:#e6db74">`</span> <span style="color:#66d9ef">for</span> definitive documentation on these fields
and exactly what they <span style="color:#66d9ef">do</span>.

Use <span style="color:#e6db74">`</span>npm install &lt;pkg&gt;<span style="color:#e6db74">`</span> afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: <span style="color:#f92672">(</span>staticwebserver<span style="color:#f92672">)</span> 
version: <span style="color:#f92672">(</span>1.0.0<span style="color:#f92672">)</span> 
description: 
entry point: <span style="color:#f92672">(</span>index.js<span style="color:#f92672">)</span> 
test command: 
git repository: 
keywords: 
author: 
license: <span style="color:#f92672">(</span>ISC<span style="color:#f92672">)</span> 
About to write to /home/joamuran/dev/express/StaticWebServer/package.json:

<span style="color:#f92672">{</span>
  <span style="color:#e6db74">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;staticwebserver&#34;</span>,
  <span style="color:#e6db74">&#34;version&#34;</span>: <span style="color:#e6db74">&#34;1.0.0&#34;</span>,
  <span style="color:#e6db74">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,
  <span style="color:#e6db74">&#34;main&#34;</span>: <span style="color:#e6db74">&#34;index.js&#34;</span>,
  <span style="color:#e6db74">&#34;scripts&#34;</span>: <span style="color:#f92672">{</span>
    <span style="color:#e6db74">&#34;test&#34;</span>: <span style="color:#e6db74">&#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;</span>
  <span style="color:#f92672">}</span>,
  <span style="color:#e6db74">&#34;author&#34;</span>: <span style="color:#e6db74">&#34;&#34;</span>,
  <span style="color:#e6db74">&#34;license&#34;</span>: <span style="color:#e6db74">&#34;ISC&#34;</span>
<span style="color:#f92672">}</span>


Is this OK? <span style="color:#f92672">(</span>yes<span style="color:#f92672">)</span> yes
</code></pre></div><p>I instal·lem express com a dependència del projecte. Recordeu que en les versions més recents d'<em>npm</em> ja no cal indicar <code>--save</code> per guardar la dependència al fitxer <em>package.json</em>, sinò que <em>npm</em> ho fa automàticament:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ npm install express
</code></pre></div><p>Ara haurem de crear un directori per a les pàgines estàtiques, al que anomenarem <code>public</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ mkdir public
</code></pre></div><p>i dins el qual afegirem la següent estructura de documents i directoris:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">public/
|-- css
|   <span style="color:#e6db74">`</span>-- styles.css
|-- img
|   <span style="color:#e6db74">`</span>-- wip.jpg
<span style="color:#e6db74">`</span>-- index.html
</code></pre></div><ul>
<li>
<p><strong>index.html</strong>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">html</span>&gt;
    &lt;<span style="color:#f92672">head</span>&gt;
        &lt;<span style="color:#f92672">meta</span> <span style="color:#a6e22e">charset</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>&gt;
        &lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;css/styles.css&#34;</span>&gt;
    &lt;/<span style="color:#f92672">head</span>&gt;
    &lt;<span style="color:#f92672">body</span>&gt;
        &lt;<span style="color:#f92672">h1</span>&gt;Benvinguts al nostre servidor web&lt;/<span style="color:#f92672">h1</span>&gt;
        &lt;<span style="color:#f92672">img</span> <span style="color:#a6e22e">src</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;img/wip.gif&#34;</span> /&gt;
        &lt;<span style="color:#f92672">h2</span>&gt;Estamos trabajando en ello&lt;/<span style="color:#f92672">h2</span>&gt;
    &lt;/<span style="color:#f92672">body</span>&gt;
&lt;/<span style="color:#f92672">html</span>&gt;
</code></pre></div></li>
<li>
<p><strong>css/styles.css</strong></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-css" data-lang="css"><span style="color:#f92672">body</span>{
    <span style="color:#66d9ef">padding-top</span>: <span style="color:#ae81ff">50</span><span style="color:#66d9ef">px</span>;
    <span style="color:#66d9ef">font-family</span>: Arial, Helvetica, <span style="color:#66d9ef">sans-serif</span>;
    <span style="color:#66d9ef">text-align</span>: <span style="color:#66d9ef">center</span>;
}
</code></pre></div></li>
</ul>
<p>Ara ja tenim els documents a servir i el paquet <em>Express</em> instal·lat, ara ens queda el més important, el fitxer <em>index.js</em> del nostre servidor web.</p>
<p>El codi serà tan senzill com:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;express&#39;</span>)
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">path</span><span style="color:#f92672">=</span><span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;path&#39;</span>)
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span><span style="color:#f92672">=</span><span style="color:#a6e22e">express</span>()

<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">express</span>.<span style="color:#66d9ef">static</span>(<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">__dirname</span>, <span style="color:#e6db74">&#39;public&#39;</span>)));
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">8000</span>);
</code></pre></div><p>i executarem la nostra aplicació amb <code>nodejs .</code>.</p>
<p>Però anem a veure amb detall què hem fet.</p>
<ul>
<li>
<p>En primer lloc <strong>carreguem el mòdul express</strong> amb una constant amb el mateix nom.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;express&#39;</span>);
</code></pre></div></li>
<li>
<p>Després, <strong>creem l&rsquo;objecte servidor</strong>, mitjançant la factría d&rsquo;objectes <code>express()</code>, que ens retorna aquest objecte servidor.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span><span style="color:#f92672">=</span><span style="color:#a6e22e">express</span>()
</code></pre></div></li>
<li>
<p>Carreguem el middleware <em>Static</em>, fent ús del mètode <code>use</code> que ens proporciona <em>Express</em>. Una vegada carregat aquest, s&rsquo;executarà cada vegada que arribe una sol·licitud HTTP.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">express</span>.<span style="color:#66d9ef">static</span>(<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">__dirname</span>, <span style="color:#e6db74">&#39;public&#39;</span>)));
</code></pre></div><p>Amb açò, carreguem el Middleware amb el servidor de pàgines web estàtiques <em>Static</em>, inclòs en <em>Express</em>. Com veiem, li passem com a paràmetre el directori <em>public</em> en el que tenim emmagatzemades les nostres pàgines. Fixeu-se que hem fet ús del mòdul de node <em>path</em>  per tal d&rsquo;establir la ruta completa al directori <code>public</code> (<code>__dirname+&quot;/public&quot;</code>). Podeu trobar més informació sobre middlewares i express en l&rsquo;API d&rsquo;Express <a href="http://expressjs.com/en/4x/api.html">http://expressjs.com/en/4x/api.html</a> i sobre el mòdul <em>path</em> en <a href="https://nodejs.org/api/path.html">https://nodejs.org/api/path.html</a>.</p>
</li>
<li>
<p>I finalment, arranquem el servidor per tal que escolte peticions al port 8000:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">8000</span>);
</code></pre></div></li>
</ul>
<p>El funcionament en general del Middleware static és el següent: quan arriba una sol·licitud HTTP al servidor en el port 8000, aquest s&rsquo;executa, analitza el mètode, la ruta, i els paràmetres de la sol·licitud HTTP, i torna una resposta. Cal tenir en compte que Static:</p>
<ul>
<li>Només accepta peticions de tipus <code>GET</code>. La resta les rebutja amb l&rsquo;error <em>405 Method not supported</em>.</li>
<li>Si el path no existeix, retorna la resposta <em>200 OK</em>, amb paràmetres associats.</li>
<li>La resposta a la resta de sol·licituds GET inclouen el codi d&rsquo;error corresponent: <em>404 Not found</em>, <em>500 Internal Server Error</em>, etc.</li>
</ul>
<p>Per tal de veure&rsquo;n el funcionament, podem accedir a través del navegador a l&rsquo;adreça http://127.0.0.1:8000, o bé a través de l&rsquo;eina client CURL, que a més, amb l&rsquo;opció -v ens mostra tots els detalls del procés de connexió:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"> curl -v http://127.0.0.1:8000
*   Trying 127.0.0.1:8000...
* TCP_NODELAY set
* Connected to 127.0.0.1 <span style="color:#f92672">(</span>127.0.0.1<span style="color:#f92672">)</span> port <span style="color:#ae81ff">8000</span> <span style="color:#f92672">(</span><span style="color:#75715e">#0)</span>
&gt; GET / HTTP/1.1
&gt; Host: 127.0.0.1:8000
&gt; User-Agent: curl/7.68.0
&gt; Accept: */*
&gt; 
* Mark bundle as not supporting multiuse
&lt; HTTP/1.1 <span style="color:#ae81ff">200</span> OK
&lt; X-Powered-By: Express
&lt; Accept-Ranges: bytes
&lt; Cache-Control: public, max-age<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span>
&lt; Last-Modified: Tue, <span style="color:#ae81ff">26</span> Jan <span style="color:#ae81ff">2021</span> 15:25:44 GMT
&lt; ETag: W/<span style="color:#e6db74">&#34;13e-1773f4cf664&#34;</span>
&lt; Content-Type: text/html; charset<span style="color:#f92672">=</span>UTF-8
&lt; Content-Length: <span style="color:#ae81ff">318</span>
&lt; Date: Wed, <span style="color:#ae81ff">27</span> Jan <span style="color:#ae81ff">2021</span> 06:22:47 GMT
&lt; Connection: keep-alive
&lt; 
   &lt;html&gt;
        &lt;head&gt;
            &lt;meta charset<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;utf-8&#34;</span>&gt;
            &lt;link rel<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> href<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;css/styles.css&#34;</span>&gt;
        &lt;/head&gt;
        &lt;body&gt;
            &lt;h1&gt;Benvinguts al nostre servidor web&lt;/h1&gt;
            &lt;img src<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;img/wip.gif&#34;</span> /&gt;
            &lt;h2&gt;Estamos trabajando en ello&lt;/h2&gt;
        &lt;/body&gt;
    &lt;/html&gt;
* Connection <span style="color:#75715e">#0 to host 127.0.0.1 left intact</span>
</code></pre></div><h2 id="3-serveis-rest">3. Serveis REST</h2>
<p>La <em>Transferència d&rsquo;Estats Representacional (<strong>RE</strong>presentational <strong>S</strong>tate <strong>T</strong>ransfer)</em>  és un estil d&rsquo;arquitectura software orientada a sistemes himpermèdia distribuïts, com la World Wide Web, on l&rsquo;estat es representa en els recursos transferits al client (entenent un estat com un conjunt de valor o dades.) Els serveis REST ens ofereixen accés a dades expressades en diversos formats (JSON, XML, etc) a través del protocol HTTP. La forma d&rsquo;accedir a aquests serveis és a través d&rsquo;APIs REST, molt més senzilles que altres protocols estàndards d&rsquo;intercanvi de dades utilitzats fins ara, com XML-RPC o SOAP.</p>
<p>Amb REST podrem crear aplicacions i serveis entre diversos dispositius, sempre i quan aquestes entenguen el protocol HTTP, sent Internet el mitjà natural a través del qual oferir els seus serveis.</p>
<p>Les principals característiques d&rsquo;aquesta <em>Arquitectura Orientada a Recursos (ROA)</em>, com també és conegut REST van ser propostades per Roy Fielding (que també va ser un dels creadors d&rsquo;HTTP) en la seua tesi doctoral l&rsquo;any 2000, i són:</p>
<ul>
<li>Direccionablilitat dels recursos</li>
<li>Ús d&rsquo;interfícies uniformes d&rsquo;HTTP: GET, POST, PUT i DELETE</li>
<li>Comunicacions sense estat al servidor (Stateless)</li>
<li>Serveis hipermèdia (Connectedness) connectats amb URLs</li>
<li>Recursos en formats oberts: HTML, XML, JSON, RSS, text pla&hellip;</li>
</ul>
<p>Veiem més en detall estes característiques.</p>
<h3 id="31-direccionabilitat-dels-recursos-i-ús-dinterfícies-uniformes">3.1. Direccionabilitat dels recursos i ús d&rsquo;interfícies uniformes</h3>
<p>Com hem dit, REST presenta una arquitectura orientada a recursos, on cada recurs del servidor disposa d&rsquo;una ruta (adreça) diferent, que pot incloure consultes o àncores amb informació addicional. Aquests recursos es processen només amb els mètodes de la interfície uniforme GET, POST, PUT i DELETE (HTTL té més mètodes, però no pertanyen a aquesta interfície.)</p>
<p>Per exemple, les següents rutes serviríen per a una API sobre pel·lícules:</p>
<table>
<thead>
<tr>
<th>Operació</th>
<th>Descripció</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>GET /pelis</code></td>
<td>Obté un llistat de totes les pel·lícules</td>
</tr>
<tr>
<td><code>POST /pelis?titol=Los+Últimos+Jedi&amp;any=2017</code></td>
<td>Afig una pel·licula indicant el títol i l&rsquo;any</td>
</tr>
<tr>
<td><code>GET /peli/123</code></td>
<td>Obté informació sobre la pel·lícula amb id 123</td>
</tr>
<tr>
<td><code>GET /peli/123/actors</code></td>
<td>Llista els actors de la pel·lícula 123</td>
</tr>
<tr>
<td><code>GET /actor?apellido=Hamill</code></td>
<td>Obté l&rsquo;actor que té &ldquo;Hamill&rdquo; per cognom</td>
</tr>
</tbody>
</table>
<p>Quan parlen d&rsquo;aquests mètodes, introduïm dos conceptes nous: seguretat i idempotència:</p>
<ul>
<li>Un <strong>mètode és segur</strong> (safe) quan no modifica dades en el servidor i pot posar-se en la memòria cau. El mètode <em>GET</em> és segur.</li>
<li>Un <strong>mètode és idempotent</strong> si el resultat és independent del nombre de vegades que s&rsquo;invoque. Les operacions associades a una interfície REST han de complir aquesta propietat. Per exemple: <code>PUT /peli/123?any=2019</code>. Cel tindre en compte que Internet no és una xarxa fiable, i que tant les peticions com les responstes es poden perdre, provocant reenviaments de les peticions. Si el que s&rsquo;ha perdut és una petició i es torna a demanar, el servidor executarà el mètode només una vegada, però si el que s&rsquo;ha perdut és la resposta, una vegada executat el mètode al servidor i hi ha reenviament, aquesta s&rsquo;executarà dues vegades, pel que si no es tractara d&rsquo;una operació idempotent, tindríem problemes. Els mètodes <em>GET</em>, <em>PUT</em> i <em>DELETE</em> són idempotents. El principal perill el tindrem amb el POST, ja que si no es controla pot duplicar recursos.</li>
</ul>
<h3 id="32-representació-dels-recursos">3.2. Representació dels recursos</h3>
<p>Els recursos transferits pel servidor al client representen l&rsquo;estat, i les transaccions, necessaris per navegar pel servei. Els recursos podran representar-se (o seriar-se) en diferents formats. Els més habituals són formats oberts, com:</p>
<ul>
<li><strong>HTML/XHTML</strong>, Per representar informació representable al navegador,</li>
<li><strong>JSON</strong>, format de seriació d&rsquo;objectes Javascript,</li>
<li><strong>XML</strong>, format de marques del W3C,</li>
<li><strong>RSS i ATOM</strong>, formats per representar col·leccions de feeods de blogs.</li>
</ul>
<p>El protocol HTTP fa ús del tipus <em>MIME</em> (format per <em>tipus/subtipus</em>), per tipar els recursos que transfereix, i informar al navegador del tipus de dada que rep.</p>
<h2 id="4-creació-daplicacions-rest-amb-express">4. Creació d&rsquo;aplicacions REST amb Express</h2>
<p>Anem a començar a veure com implementaríem un servei REST amb Express i els Middlewares que ens ofereix.</p>
<h3 id="41-mètodes-de-ruta">4.1. Mètodes de Ruta</h3>
<p>El framework Express disposa de mètodes que instal·len middlewares associats a verbs (o mètodes) HTTP amb rutes específiques. Aquests mètodes rebran com a paràmetres en primer lloc el <em>path</em> al recurs i en segon lloc el <em>middleware</em>, expressat com a funció de callback.</p>
<table>
<thead>
<tr>
<th>Mètodes Middleware</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>get (path, function(req, res){..})</code></td>
</tr>
<tr>
<td><code>post (path, function(req, res){..})</code></td>
</tr>
<tr>
<td><code>put (path, function(req, res){..})</code></td>
</tr>
<tr>
<td><code>delete (path, function(req, res){..})</code></td>
</tr>
<tr>
<td><code>all (path, function(req, res){..})</code></td>
</tr>
</tbody>
</table>
<p>La funció de callback, el <em>Middleware</em>, s&rsquo;executarà si el verb (mètode) i el path coincideixen amb la sol·licitud HTTP. Els paràmetres d&rsquo;aquesta funció de Middleware són:</p>
<ul>
<li><strong>req</strong>: objecte javascript amb paràmetres de la sol·licitud http,</li>
<li><strong>res</strong>: objecte javacript per configurar la resposta http (la resposta s&rsquo;envia a través d&rsquo;este objecte).</li>
</ul>
<p>Un exemple senzill, extret de l&rsquo;API d&rsquo;Express sería:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/&#39;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>){
		<span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;hello world&#39;</span>);
});
</code></pre></div><h3 id="42-rutes-get">4.2. Rutes GET</h3>
<p>El mètode <code>get(path, MW)</code> instal·la el middleware MW (que serà una funció de callback) en l&rsquo;aplicació, de manera que s&rsquo;execute només quan arriben sol·licituds <code>GET path</code>.</p>
<p>Per tal de configurar la resposta davant d&rsquo;un get, s&rsquo;utilitza l&rsquo;objecte <code>res</code> que ens passa Express al Middleware mitjançant el mètode <em>send</em>: <code>res.send(sting)</code>. Amb açò, es configura la resposta HTTP en aquest objecte <em>res</em> amb la configuració estàndard (<em>codi 200 OK, Content: text/html, etc</em>) i s&rsquo;envia al client.</p>
<p><strong>Ús de múltiples Middlewares</strong></p>
<p>Quan utilitzem diversos Middlewares, instal·lats bé amb el mètode <code>use</code> o amb les rutes, aquests s&rsquo;invoquen en l&rsquo;ordre d&rsquo;instal·lació. És a dir, si tenim el següent codi:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">express</span>.<span style="color:#66d9ef">static</span>(<span style="color:#a6e22e">path</span>.<span style="color:#a6e22e">join</span>(<span style="color:#a6e22e">__dirname</span>, <span style="color:#e6db74">&#39;public&#39;</span>)));
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>){
    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Benvingut al recurs principal&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#34;</span>);
})
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;*&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>){
    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Aquesta recurs no es troba al servidor&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#34;</span>);
})
</code></pre></div><p>Quan demanem el recurs arrel (/), el primer que s&rsquo;executarà és el del Middleware Static, servint la pàgina web del directori <em>public</em>, i  no s&rsquo;executarà el mètode corresponent al GET. En canvi, si havérem invertit l&rsquo;ordre, s&rsquo;havera executat el mètode de ruta.</p>
<p>Fixem-nos també que al final, hem afegit un mètode <code>GET *</code>, que respondrà a totes les peticions que no hagen coincidit amb cap ruta anterior.</p>
<p><strong>Els paràmetres <code>req</code> i <code>res</code></strong></p>
<p>Com hem vist, els paràmetres <em>req</em> i <em>res</em> es reben en la funció de callback (Middleware), i representen a la petició i la resposta.</p>
<p>El paràmetre <em>req</em> és un objecte amb tota la informació relativa a la sol·licitud HTTP, i permet conéixer més paràmetres d&rsquo;aquesta. Per exemple, podem accedir al mètode amb <code>req.method</code>, al path, amb <code>req.path</code>, o al host, amb <code>req.get('host')</code>.</p>
<p>Per la seua bada,m el paràmetre <code>res</code> permet configurar la resposta HTTP. Per exemple, amb <code>res.type('text/json')</code> podem especificar el tipus de document que s&rsquo;envia en la resposta; o amb <code>res.status(codi)</code>, també podem indicar l&rsquo;estat de la resposta.</p>
<p><strong>Paràmetres de ruta</strong></p>
<p>Els clients poden enviar paràmetres a través de la URL. Les URLs que tenen paràmetres coma part de la ruta s&rsquo;anomenen <em>URLs pesades</em> o <em>fat URLs</em>.  Estos paràmetres es poden indentificar amb express.js en la definició de rutes que accepta utilitzant els <code>:</code>. Per exemple: <code>/peli/:id</code> especifica que <code>:id</code> és un paràmetre, pel que respondrà a peticions com <code>GET /peli/id</code>, sent <code>id</code> qualsevol valor.</p>
<p>Per tal d&rsquo;accedir a aquesta valor des de dins el Middleware fem ús de <code>req.params.paràmetre</code>; al cas de l&rsquo;exemple sería <code>req.params.id</code>. Una ruta pot tindre tants paràmetres com desitgem.</p>
<p>veiem un exemple amb algunes de les coses que hem comentat:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">    <span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/echo/:text&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>){
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">type</span>(<span style="color:#e6db74">&#39;text/json&#39;</span>);
        <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">salutacio</span><span style="color:#f92672">=</span>{<span style="color:#a6e22e">date</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">new</span> Date(),
                    <span style="color:#a6e22e">msg</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">text</span>};
        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">salutacio</span>);
    })
</code></pre></div><p>Amb aquesta Middleware contestem a les peticions tipus <code>GET /echo/paràmetre</code> i retornem un objecte de tipus JSON en la resposta, format per la data en la que s&rsquo;ha rebut la connexió, i un missatge, que és un <em>eco</em> del paràmetre que ens han passat en la crida.</p>
<p>Per altra banda, podem afegir algunes condicions als paràmetres. Per exemple:</p>
<ul>
<li><strong>Paràmetres condicionals amb <em>?</em></strong>: <code>app.get('/peli/:id?', function ())</code>:  Indica que el parámetre <code>id</code> és opcional, pel que aquest <em>middleware</em> respondrà tant a la ruta <code>/peli/id</code> com a <code>/peli/</code> o <code>/peli</code>.</li>
<li><strong>Parà,etres amb expressions regulars, entre parèntesi</strong>:<code>app.get('/peli/:id(RegExpr), function())</code>, fent coincidir la ruta amb qualsevol que case amb l&rsquo;expressió regular.</li>
</ul>
<p><strong>Composició i execució de MiddleWares</strong></p>
<p>Quan rebem una transacció HTTP, Express rep la sol·licitud en el paràmetre <code>req</code>, i aquest prepara la resposta en el paràmetre <code>res</code>. Fet açò, pssa amb <code>next()</code>el control al següent <em>Middleware</em> o amb <code>next(err)</code>al següent <em>Middleware</em> d&rsquo;error.</p>
<p>Quan instal·lem middlewares amb <code>use()</code>, o amb rutes com <code>get()</code>, <code>put()</code>&hellip; l&rsquo;ordre d&rsquo;execució/invocació és el mateix en què han estat instal·lats, permetent una programació seqüencial, modular i fàcilment legible, però conservant l&rsquo;eficàcia de la programació dirigida per events.</p>
<p>Cal dir que express.js es basa en el concepte de framework introduït per connect.js, del qui hereta molts middlewares. Podem consultar més informació sobre connect a la seua <a href="https://github.com/senchalabs/connect">lloc en Github</a>.</p>
<p><strong>Composició i terminació de MiddleWares</strong></p>
<p>La resposta a una sol·licitud http s&rsquo;estructura amb express com una seqüència de middlewares, on cada middleware processa algun element o opció de la transició HTTP, i la funció next permet passar el control al següent middleware.</p>
<p>Un <em>middleware</em> acaba de 3 formes:</p>
<ul>
<li>finalitza el procés, enviant al client la resposta HTTP amb send, i finalitzant l&rsquo;atenció a la sol·licitud,</li>
<li>Passa el control al següent middleware, amb la funció <code>next()</code>, o</li>
<li>Passa el control al següent middleware d&rsquo;error <code>(next(err))</code>.</li>
</ul>
<p>Els middleware tenen tres paràmetres: <em>req</em>, <em>res</em>, i <em>next</em>, que és opcional i és el nom (usat com a callback), del middleware següent. Veiem-ho amb un exemple:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/identifica/:user&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">next</span>){
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">user</span><span style="color:#f92672">==</span><span style="color:#e6db74">&#34;admin&#34;</span>) <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Benvingut Administrador&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#34;</span>);
    <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">next</span>();
});
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;*&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">next</span>){
    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Petició desconeguda&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#34;</span>); 
});
</code></pre></div><p>Amb aquest codi, si l&rsquo;usuari està identificat (és admin), rebrà un missatge de benvinguda, en cas contrari, es passa al següent middleware, que respon a qualsevol ruta, amb la resposta &ldquo;<em>Petició desconeguda</em>&rdquo;.</p>
<p>També existeixen els <strong>middleware d&rsquo;errors</strong>, que tenen quatre paràmetres; l&rsquo;error, en primer lloc, més els tres paràmetres que ja coneixem. Quan invoquem a <code>next</code> amb un error, el que s&rsquo;invocarà serà el següent middleware d&rsquo;error, en lloc del següent middleware. Veiem una modificació de l&rsquo;anterior per exemplificar-ho:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/identifica/:user&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">next</span>){
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">user</span><span style="color:#f92672">==</span><span style="color:#e6db74">&#34;admin&#34;</span>) <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Benvingut Administrador&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#34;</span>);
    <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">next</span>(<span style="color:#66d9ef">new</span> Error(<span style="color:#e6db74">&#34;Usuari no autenticat&#34;</span>));
});
<span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;*&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">next</span>){
    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Petició desconeguda&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#34;</span>); 
});
<span style="color:#75715e">// Middleware d&#39;error
</span><span style="color:#75715e"></span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">next</span>){
    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">toString</span>());
})
</code></pre></div><p>Com veiem, si l&rsquo;usuari no es troba autenticat, invoquem a next, passant-li un error, pel que el middleware que s&rsquo;executarà no serà el <code>get *</code>, sinò el definit a l'<code>use</code> del final.</p>
<h3 id="43-rutes-post">4.3. Rutes POST</h3>
<p>El mètode POST s&rsquo;utilitza per enviar una entitat a un recurs específic, i sovint, causa un canvi d&rsquo;estat en el servidor.</p>
<p>Per tal de suportar peticions <code>POST path</code>, s&rsquo;utilitza el mètode <code>post(path, MW)</code>, de la mateixa manera que utilitzàvem <em>get</em>, i fem ús de <code>req</code> i <code>res</code> dins el Middleware per accedir als paràmetres de la petició i generar la resposta.</p>
<p>A diferència del mètode GET, al mètode POST no podem proporcionar paràmetres a l&rsquo;URL, pel que aquests han d&rsquo;anar en el cos de la petició. Al nostre servidor, per tal de capturar aquest tipus de peticions, necessitarem un middleware anomenat <em>body-parser</em>, inclòs en Express, que ens ajudarà a accedir al cos dels missatges.</p>
<p>Així doncs, a banda de carregar <code>express</code>, carregarem també <code>body-parser</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">var</span> <span style="color:#a6e22e">body_parser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;body-parser&#39;</span>);
</code></pre></div><p>I una vegada tenim definida l&rsquo;aplicació Express (que hem anomenat <code>app</code>), fem ús del middleware <em>body-parser</em> amb:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">body_parser</span>.<span style="color:#a6e22e">urlencoded</span>({<span style="color:#a6e22e">extended</span><span style="color:#f92672">:</span><span style="color:#66d9ef">true</span>}));
</code></pre></div><p>Amb això haurem inicialitzat el middleware, i ens quedarà crear les rutes que utilitzarem per atendre les peticions POST. Anem a afegir dos rutes, una que capture inicialment totes les peticions de tipus POST i ens mostre informació, i acabe cedint el control a la següent ruta, mitjançant la funció <code>next()</code>:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">post</span>(<span style="color:#e6db74">&#34;*&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">next</span>){
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;\n\nInformació de la petició:\n&#34;</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;   Mètode: &#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">method</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;     Path: &#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">path</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;     Host: &#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;host&#39;</span>));
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;Paràmetres:&#34;</span>);
    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>);
    <span style="color:#a6e22e">next</span>();
})
</code></pre></div><p>I la següent ruta, atendrà al verb <em>newpeli</em>, rebent un títol de pel·lícula, un director i un any de producció. Veiem el codi:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">post</span>(<span style="color:#e6db74">&#39;/newpeli&#39;</span>, <span style="color:#66d9ef">function</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) {
	
	<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">titol</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">titol</span> <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;&#39;</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">any</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">any</span> <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;&#39;</span>;
    <span style="color:#66d9ef">var</span> <span style="color:#a6e22e">director</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">body</span>.<span style="color:#a6e22e">director</span> <span style="color:#f92672">||</span> <span style="color:#e6db74">&#39;&#39;</span>;
    
    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">titol</span><span style="color:#f92672">!=</span><span style="color:#e6db74">&#39;&#39;</span>){
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#34;\nGuardant peli \n\n&#34;</span>);
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">titol</span>);
        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">director</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34; (&#34;</span><span style="color:#f92672">+</span><span style="color:#a6e22e">any</span><span style="color:#f92672">+</span><span style="color:#e6db74">&#34;)&#34;</span>);
        <span style="color:#75715e">// Aci es faria el guardat en fitxers, bd, etc.
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">201</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;Peli guardada amb èxit&#34;</span>);
    } <span style="color:#66d9ef">else</span> <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">400</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;El nom ha de tindre un valor&#34;</span>);

});
</code></pre></div><p>Fixeu-vos, que per accedir al cos de la petició fem ús de <code>req.body</code>, i el component corresponent a la clau que busquem (<code>titol</code>, <code>any</code> o <code>director</code>). Si ens fixem al codi, si se&rsquo;ns ha especificat un títol, el mostrem per la consola del servidor, i tornem l&rsquo;estat 201 (<em>Created</em>) junt amb el misstge <em>Peli guardada amb èxit</em>. En cas que el títol siga en blanc, retornarem un estat 400 (<em>Bad Request</em>) i un misstge indicant que el nom ha de tindre un valor.</p>
<p>Si ara fem un petició amb Postman (veieu abans l&rsquo;Annex II sobre Postman!) de tipus POST, sense especificar cap argument, o afegint els arguments com a paràmetres (Pestanya Params), la resposta serà la següent:</p>
<p><img src="../img/postman6.png" alt="Petició POST buida">{ width=500px }</p>
<p>Per tal d&rsquo;enviar els paràmetres en el cos de la petició correctament, ho dem de fer des de la pestanya <em>Body</em> i a més, codificant-los en format <em>x-www-form-urlencoded</em>. Amb això, sí que tindrem una resposta afirmativa per part del servidor.</p>
<p><img src="../img/postman7.png" alt="Petició POST amb èxit">{ width=500px }</p>
<blockquote>
<p>Podeu trobar més informació sobre el mètode POST  a la <a href="https://developer.mozilla.org/es/docs/Web/HTTP/Methods/POST">documentació de Mozilla</a></p>
</blockquote>
<h2 id="5-express-i-mongodb">5. Express i MongoDB</h2>
<p>Molts dels serveis de tipus RESTful implementats amb Express fan ús de MongoDB com a base de dades. En aquest apartat, anem a veure com podem oferir una API REST per proporcionar informació emmagatzemada en una base de dades MongoDB.</p>
<p>Per a l&rsquo;accés a MongoDB des de nodejs farem ús de <em>Mongoose</em>, una llibrería ODM (<em>Object Document Mapping</em>) que s&rsquo;encarrega de realitzar la traducció o mapat entre els objectes d&rsquo;una aplicació i els documents d&rsquo;una BD documental. En aquest cas, Mongoose és una llibrería que ens permet realitzar el mapat entre documents de la BD Documental MongoDB i objectes Javascript.</p>
<p>MongoDB és una base de dades NoSQL orientada a documents, i no subjecta a cap esquema, la qual cosa vol dir que podem emmagatzemar qualsevol document JSON en ella, amb esquemes totalment diferents.</p>
<p>Per altra banda, en MongoDB un <em>document</em> fa referència a cadascun dels objectes dels què volem emmagatzemar informació (el que seríen el registres en el model relacional), que es componen de <em>camps</em> (atributs), i s&rsquo;organitzen en <em>col·leccions</em> (taules) dins una base de dades.</p>
<blockquote>
<p>Per a <strong>més informació sobre MongoDB i la seua instal·lació, consulteu l'<em>Annex I</em></strong>, i els apunts d&rsquo;Accés a dades.</p>
</blockquote>
<p>Tot i que Mongo no requereix de cap esquelet o <em>esquema</em> per als documents (com fan les BD relacionals amb les definicions de taula), Mongoose sí que ens obliga, en certa mesura, a definir un <em><strong>esquema</strong></em> a la capa d&rsquo;aplicació, per tal de fer possible el mapat. <em>Mongoose</em> introdueix el concepte de <em>Model</em>, com a un constructor de més alt nivell, que, a partir d&rsquo;un esquema, crea una instància d&rsquo;un document (el que vindríen a ser els registres de la BDR).</p>
<h3 id="51-creació-del-projecte-i-paquets-necessaris">5.1. Creació del projecte i paquets necessaris</h3>
<p>El primer que haurem de fer és crear el projecte de la forma habitual amb:</p>
<pre><code>npm init
</code></pre><p>Li donarem per nom <em>mongoserver</em>, i instal·larem els paquets <code>mongoose</code> i <code>express</code>:</p>
<pre><code>npm install mongoose express
</code></pre><p>Amb el que ens hauran aparegut les dependències al fitxer package.json:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#e6db74">&#34;dependencies&#34;</span><span style="color:#f92672">:</span> {
  <span style="color:#e6db74">&#34;express&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^4.17.1&#34;</span>,
  <span style="color:#e6db74">&#34;mongoose&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;^5.11.13&#34;</span>
}
</code></pre></div><p>Ara crearem una carpeta nova, anomenada <code>models</code>, i que contindrà un fitxer anomenat <code>pelis.js</code>. L&rsquo;estructura general quedarà de la següent forma:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">mongoServer$
	|-- index.js
	|-- models
	|   <span style="color:#e6db74">`</span>-- peli.js
	|-- node_modules
	<span style="color:#e6db74">`</span>-- package.json
</code></pre></div><h3 id="52-creació-del-model">5.2. Creació del model</h3>
<p>MongoDB emmagatzema les dades en col·leccions amb múltiples documents, que no tenen per què tindre la mateixa estructura. Per altra banda, quan treballem amb objectes en una aplicació, necessitem que aquests pertanguen a una classe, pel que sí que han de tindre la mateixa estructura. Per aquest motiu, <em>Mongoose</em> fa ús de l&rsquo;objecte <em>Schema</em>, per tal de definir les propietats dels documents, indicant el tipus i les seues característiques, per tal de &ldquo;forçar&rdquo; la seua estructura. Així doncs, primerament, haurem de definir un esquema de <em>Mongoose</em> i després definirem un <em>Model constructor</em>. que ens servirà per tal de crear instàncies dels documents de MongoDB.</p>
<p>El fitxer que hem creat <em>models/peli.js</em> serà doncs el model per a les pel·lícules (com si es tractara d&rsquo;un <em>bean</em> per a Hibernate), i contindrà el següent:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#e6db74">&#39;use strict&#39;</span>
  
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">mongoose</span><span style="color:#f92672">=</span><span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;mongoose&#39;</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">Schema</span><span style="color:#f92672">=</span><span style="color:#a6e22e">mongoose</span>.<span style="color:#a6e22e">Schema</span>

<span style="color:#75715e">// Definició de l&#39;esquema (equivalent a un bean/xml de mapat)
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">var</span> <span style="color:#a6e22e">Pelis</span><span style="color:#f92672">=</span><span style="color:#66d9ef">new</span> <span style="color:#a6e22e">Schema</span>({
    <span style="color:#a6e22e">title</span><span style="color:#f92672">:</span> String,
    <span style="color:#a6e22e">year</span><span style="color:#f92672">:</span> Number,
    <span style="color:#a6e22e">imbd</span><span style="color:#f92672">:</span> String,
    <span style="color:#a6e22e">type</span><span style="color:#f92672">:</span> String
   });

<span style="color:#75715e">// Exportem el model de mongoose (com els mètodes públics en Java):
</span><span style="color:#75715e"></span><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">mongoose</span>.<span style="color:#a6e22e">model</span>(<span style="color:#e6db74">&#39;video_movie&#39;</span>, <span style="color:#a6e22e">Pelis</span>);
</code></pre></div><p>Com veiem, el primer que fem és importar la llibrería Mongoose, i definir la constant Schema a partir de l'<em>esquema de Mongoose</em>. Després, definim l&rsquo;objecte <em>Pelis</em>, compost pel títol, l&rsquo;any, el imbd i el tipus, fent ús del constructor Schema. Fixeu-se que, a diferència dels objectes estàndards de Javascript, amb l'<em>Schema</em> de Mongoose, podem definir també els tipus. Després, fem ús d&rsquo;aquest esquema per tal de definir el model <em>video_movie</em> (<code>mongoose.model('video_movie', Pelis)</code>), i exportem aquest model, per tal que siga accessible des de l&rsquo;exterior, amb <code>module.exports</code>.</p>
<p>Cal tenir en compte un matís important. Fixeu-se que el model s&rsquo;anomena <code>video_movie</code>, i que serà el model per als diferents documents que creem. Per tal de crear una col·lecció per tal d&rsquo;emmagatzemar documents d&rsquo;aquest tipus, s&rsquo;utilitza el mateix nom en plural, <code>video_movies</code>, que és exactament com es diu la col·lecció que hem utilitzat a la base de dades. A més, tot i que no ho hajam especificat directament, la base de dades que estem utilitzant en tot moment és la base de dades de <code>test</code>, pel que les col·leccions que hem utilitzt s&rsquo;emmagatzemen per defecte en aquesta base de dades.</p>
<h3 id="53-creació-de-lapi-rest">5.3. Creació de l&rsquo;API REST</h3>
<p>Anem a veure ara com crearíem el servidor REST. En primer lloc, importem les llibreríes que necessitem, tant de Mongoose com d&rsquo;Express, així com el fitxer <code>peli.js</code> amb el nostre model:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#e6db74">&#39;use strict&#39;</span>

<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">mongoose</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;mongoose&#39;</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">video_movie</span><span style="color:#f92672">=</span><span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#34;./models/peli.js&#34;</span>);
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">express</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;express&#39;</span>)
<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">path</span><span style="color:#f92672">=</span><span style="color:#a6e22e">require</span>(<span style="color:#e6db74">&#39;path&#39;</span>)
</code></pre></div><p>Posteriorment, creem la instància d&rsquo;Express:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span><span style="color:#f92672">=</span><span style="color:#a6e22e">express</span>()
</code></pre></div><p>I fem la connexió a MongoDB amb el següent:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Creem la connexió a MongoDB
</span><span style="color:#75715e"></span><span style="color:#a6e22e">mongoose</span>.<span style="color:#a6e22e">connect</span>(<span style="color:#e6db74">&#39;mongodb://localhost:27017/test&#39;</span>, { <span style="color:#a6e22e">useNewUrlParser</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>, <span style="color:#a6e22e">useUnifiedTopology</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">true</span>  }); 
<span style="color:#a6e22e">mongoose</span>.<span style="color:#a6e22e">connection</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#34;error&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">e</span>) { <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">e</span>); });
</code></pre></div><p>Com veiem, per connectar-nos a Mongo fem ús del mètode <code>connect</code> que rep dos paràmetres:</p>
<ul>
<li>la cadena de connexió, on indiquem el host, el port (mongoDB serveix pel 27017) i la base de dades.</li>
<li>Un JSON amb diferents paràmetres de connexió. El paràmetre <code>useNewUrlParser</code> és per a l&rsquo;analitzador d&rsquo;adreces, i <code>useUnifiedTopology</code> per utilitzar el nou motor de connexió i evitar un Warning en la connexió.</li>
</ul>
<p>Per a més informació sobre les connexions en Mongoose, podeu consultar <a href="https://mongoosejs.com/docs/connections.html">https://mongoosejs.com/docs/connections.html</a>.</p>
<p>Ara només ens quedaria preparar les diferents rutes a les que volguem atendre. Com que es tracta d&rsquo;un exemple, anem a implementar només el mètode GET sobre la ruta <code>/peli/:id?</code>, de manera que puguem consultar totes les pelis, o bé una peli concreta donat el seu id. A més, també tindrem en compte alguns errors:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">// Preparem les rutes i les peticions
</span><span style="color:#75715e"></span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;/peli/:id?&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">next</span>){
    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">idpeli</span><span style="color:#f92672">=</span><span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">params</span>.<span style="color:#a6e22e">id</span>;
    <span style="color:#75715e">// Si ens passen un id, el busquem
</span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">idpeli</span><span style="color:#f92672">!=</span><span style="color:#66d9ef">null</span>) {
        <span style="color:#a6e22e">video_movie</span>.<span style="color:#a6e22e">findById</span>(<span style="color:#a6e22e">idpeli</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">res_data</span>){
            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) <span style="color:#a6e22e">next</span>(<span style="color:#66d9ef">new</span> Error(<span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">toString</span>));
            <span style="color:#66d9ef">else</span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">res_data</span>);
            
        });
    }
    <span style="color:#66d9ef">else</span> {
        <span style="color:#75715e">// En cas contrari, mostrem totes les pel·lícules
</span><span style="color:#75715e"></span>        <span style="color:#a6e22e">video_movie</span>.<span style="color:#a6e22e">find</span>({}, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">res_data</span>){
            <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">err</span>) <span style="color:#a6e22e">next</span>(<span style="color:#66d9ef">new</span> Error(<span style="color:#a6e22e">err</span>.<span style="color:#a6e22e">toString</span>));
            <span style="color:#66d9ef">else</span>  <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">res_data</span>);
            
        });
    }
});

<span style="color:#75715e">// Middleware d&#39;error (400 Bad Request)
</span><span style="color:#75715e"></span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#34;*&#34;</span>, <span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">next</span>){
    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">400</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;&lt;html&gt;&lt;body&gt;&lt;h1&gt;Petició desconeguda&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#34;</span>); 
});
<span style="color:#75715e">// Middleware d&#39;error (404 Not Found)
</span><span style="color:#75715e"></span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#66d9ef">function</span>(<span style="color:#a6e22e">err</span>, <span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>, <span style="color:#a6e22e">next</span>){
    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">405</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#34;&lt;html&gt;&lt;body&gt;&lt;h1&gt;No s&#39;ha trobat el recurs&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&#34;</span>);
})
</code></pre></div><p>I finalment, escoltem pel port 8000:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#ae81ff">8000</span>);
</code></pre></div><p>Amb el que podrem fer peticions al servidor del tipus <code>https://server:8000/peli</code> o <code>https://server:8000/peli/idpeli</code>.</p>
<p><img src="../img/postman8.png" alt="Petició GET https://server:8000/peli">{ width=500px }</p>
<p><img src="../img/postman9.png" alt="Petició PGET https://server:8000/peli/idpeli">{ width=500px }</p>
<p>\newpage</p>
<h2 id="annex-i-mongodb">Annex I. MongoDB</h2>
<p>MongoDB és una base de dades noSQL, orientada a documents i basada en l&rsquo;emmagatzemament de les seues estructures de dades en documents de tipus JSON amb un esquema dinàmic.</p>
<p>Un servidor MongoDB pot tindre diverses bases de dades. Cadascuna d&rsquo;elles conté un conjunt de col·lecions (equiparebles a les taules d&rsquo;una BDR) i ada col·lecció emmagatzema un conjunt de documents JSON, format per atributs clau-valor (equiparables als registres d&rsquo;una BDR).</p>
<p>A grans trets, podem considerar MongoDB com un gran magatzem de dades en format JSON.</p>
<h3 id="installació">Instal·lació</h3>
<p>Per tal d&rsquo;instal·lar la versió Community de MongoDB, amb la que treballarem, podem descarregar-la per a qualsevol sistema des de <a href="https://www.mongodb.com/try/download/community">la seua pàgina de descàrregues</a>. Actualment, la última versió és la 4.4.3.</p>
<p>En Ubuntu, podem també afegir-nos el repositori de mongoDB per per tal de tindre també disponibles les possibles actualitzacions que vagen eixint. Per a això, seguirem els pasos descrit <a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/">al manual</a>:</p>
<ol>
<li>importem la clau pública utilitzada pel sistema de paquets</li>
</ol>
<pre><code>wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add -
</code></pre><ol start="2">
<li>Creem el fitxer <code>mongodb-org-4.4.list</code> la llista de fonts del sistema amb:</li>
</ol>
<pre><code>echo &quot;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse&quot; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list
</code></pre><ol start="3">
<li>Refresquem la cache de paquets</li>
</ol>
<pre><code>sudo apt update
</code></pre><ol start="4">
<li>Instal·lem el paquet <code>mongodb-org</code>:</li>
</ol>
<pre><code>sudo apt install mongodb-org
</code></pre><p>Això ens instal·larà també els paquets de servidor <code>mongodb-org-server</code>, el client <code>mongodb-org-shell</code>, i diverses utilitats (<code>mongodb-org-tools</code> i per a clústers <code>mongodb-org-mongos</code>.</p>
<p>El paquet s&rsquo;instal·la al directori <code>/var/lib/mongodb</code>, i deixarà els seus logs a <code>/var/log/mongodb</code>. Per defecte, el servei de  MongoDB s&rsquo;executa amb l&rsquo;usuari <code>mongodb</code>, creat durant la instal·lació. Si canviem l&rsquo;usuari del procés, caldrà modificar els permissos en ambdós directoris d&rsquo;instal·lació i log. A més, mongoDB disposa d&rsquo;un fitxer de configuració en <code>/etc/mongodb.conf</code>, amb la informació sobre la ubicació dels directoris, el port, etc.</p>
<h3 id="funcionament">Funcionament</h3>
<p>Una vegada instal·lat, podem arrancar el servei amb:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">$ sudo service mongod start
</code></pre></div><p>I comprovar-ne l&rsquo;estat amb:</p>
<pre><code>● mongod.service - MongoDB Database Server
     Loaded: loaded (/lib/systemd/system/mongod.service; disabled; vendor preset: enabled)
     Active: active (running) since Wed 2021-01-27 10:24:43 CET; 5s ago
       Docs: https://docs.mongodb.org/manual
   Main PID: 109327 (mongod)
     Memory: 62.0M
     CGroup: /system.slice/mongod.service
             └─109327 /usr/bin/mongod --config /etc/mongod.conf

de gen. 27 10:24:43 lluc systemd[1]: Started MongoDB Database Server.
</code></pre><p>En Accés a Dades treballareu amb el client. Per a PSP, com se us comentarà a la unitat, accedirem mitjançant una llibrería de Node.</p>
<h3 id="important-una-base-de-dades-dexemple">Important una base de dades d&rsquo;exemple</h3>
<p>Al repositori de Github <a href="https://github.com/SouthbankSoftware/dbkoda-data">dbkoda-data</a> podeu trobar diverses bases de dades per a MongoDB. Anem a descarregar una base de dades de pel·lícules per als nostres exemples:</p>
<pre><code>$ wget https://github.com/SouthbankSoftware/dbkoda-data/raw/master/SampleCollections/dump/SampleCollections/video_movies.bson
</code></pre><p>El format en què es troba és <code>bson</code> (Binary JSON) que com el nom indica, és un format de seriació JSON binari.</p>
<p>Una vegada tinguem descarregat el fitxer, l&rsquo;importarem a MongoDB amb:</p>
<pre><code>$ mongorestore ./video_movies.bson 
</code></pre><p>L&rsquo;eixida serà semblant a:</p>
<pre><code>2021-01-27T10:55:52.369+0100    checking for collection data in video_movies.bson
2021-01-27T10:55:52.385+0100    restoring test.video_movies from video_movies.bson
2021-01-27T10:55:52.428+0100    no indexes to restore
2021-01-27T10:55:52.428+0100    finished restoring test.video_movies (3365 documents, 0 failures)
2021-01-27T10:55:52.428+0100    3365 document(s) restored successfully. 0 document(s) failed to restore.
</code></pre><p>Per tal de comprovar que s&rsquo;han carregat , podem accedir al client de mongo:</p>
<pre><code>mongo
</code></pre><p>I executar per exemple la consulta:</p>
<pre><code>&gt; db.video_movies.find()
</code></pre><p>Que ens mostrarà tota la base de dades.</p>
<p>El format de cadscun d&rsquo;aquests elements serà semblant al següent:</p>
<pre><code>{
    &quot;_id&quot;:ObjectId(&quot;56918f5e24de1e0ce2dfccd6&quot;),
    &quot;title&quot;:&quot;Star Trek II: The Wrath of Khan&quot;,
    &quot;year&quot;:1982,
    &quot;imdb&quot;:&quot;tt0084726&quot;,
    &quot;type&quot;:&quot;movie&quot;

}
</code></pre><h2 id="annex-ii-postman">Annex II. Postman</h2>
<p>Postman és una aplicació web per a l&rsquo;escriptori que té per finalitat facilitar la creació i testeix d&rsquo;APIs REST.</p>
<p>Podem descarregar l&rsquo;aplicació des de la seua <a href="https://www.postman.com/downloads/">web de descàrregues</a>. Una vegada descomprimim el fitxer carregat, podem accedir directament a l&rsquo;executable <em>Postman</em>, sense necessitat de fer cap instal·lació.</p>
<p>Per treballar amb ell, cal estar registrats. Podem autenticar-nos amb el nostre compte de Google mateix. Una vegada autenticats, la pantalla principal de l&rsquo;aplicació és:</p>
<p><img src="../img/postman1.png" alt="Postman">{ width=450px }</p>
<p>Postman organitza en col·leccions les diferents peticions que tenim associades a un projecte. Per tal de crear una nova col·lecció, fem ús del botó <code>+</code> que hi ha cap a la part superior dreta:</p>
<p><img src="../img/postman2.png" alt="Creació d&rsquo;una nova col·lecció">{ width=250px }</p>
<p>Fent click en ell, se&rsquo;ns crea una nova col·lecció directament, de la qual, podem modificar les propietats en la finestra de la dreta. En aquest cas, li hem canviat el nom de <em>New Collection</em> a <em>TestRestPSP</em>:</p>
<p><img src="../img/postman3.png" alt="Modificant el nom de la col·lecció">{ width=250px }</p>
<p>Una vegada creada la col·lecció, ja podem afegir peticions a aquesta. Per a això, fem clic amb el botó dret sobre el nom de la col·lecció, i seleccionem <em>Add Request</em>:</p>
<p><img src="../img/postman4.png" alt="Afegint peticions a la connexió">{ width=250px }</p>
<p>Una vegada creada, des de la part de la dreta, podem modificar el nom de la petició (Per exemple T<em>estRestPSP/Prova Eco</em>), seleccionar el tipus de petició que volem fer, i l&rsquo;endpoint (la URL) a la que volem accedir. Si volem llançar la petició, només haurem de clicar en <em>Send</em> per fer-ho:</p>
<p><img src="../img/postman5.png" alt="Paràmetres i execució de la petició">{ width=450px }</p>
<p>D&rsquo;aquesta manera, anem a poder realitzar també peticions de tipus POST, entre d&rsquo;altres, que no podiem realitzar directament des del navegador.</p>

        </article>
<aside class="table-of-contents">
    <nav id="TableOfContents">
  <ul>
    <li><a href="#1-serveis-dinternet">1. Serveis d&rsquo;Internet</a>
      <ul>
        <li><a href="#11-el-protocol-http">1.1. El protocol HTTP</a></li>
        <li><a href="#12-serveis-web">1.2. Serveis web</a></li>
      </ul>
    </li>
    <li><a href="#2-express">2. Express</a>
      <ul>
        <li><a href="#21-el-middleware-static">2.1. El middleware Static</a></li>
      </ul>
    </li>
    <li><a href="#3-serveis-rest">3. Serveis REST</a>
      <ul>
        <li><a href="#31-direccionabilitat-dels-recursos-i-ús-dinterfícies-uniformes">3.1. Direccionabilitat dels recursos i ús d&rsquo;interfícies uniformes</a></li>
        <li><a href="#32-representació-dels-recursos">3.2. Representació dels recursos</a></li>
      </ul>
    </li>
    <li><a href="#4-creació-daplicacions-rest-amb-express">4. Creació d&rsquo;aplicacions REST amb Express</a>
      <ul>
        <li><a href="#41-mètodes-de-ruta">4.1. Mètodes de Ruta</a></li>
        <li><a href="#42-rutes-get">4.2. Rutes GET</a></li>
        <li><a href="#43-rutes-post">4.3. Rutes POST</a></li>
      </ul>
    </li>
    <li><a href="#5-express-i-mongodb">5. Express i MongoDB</a>
      <ul>
        <li><a href="#51-creació-del-projecte-i-paquets-necessaris">5.1. Creació del projecte i paquets necessaris</a></li>
        <li><a href="#52-creació-del-model">5.2. Creació del model</a></li>
        <li><a href="#53-creació-de-lapi-rest">5.3. Creació de l&rsquo;API REST</a></li>
      </ul>
    </li>
    <li><a href="#annex-i-mongodb">Annex I. MongoDB</a>
      <ul>
        <li><a href="#installació">Instal·lació</a></li>
        <li><a href="#funcionament">Funcionament</a></li>
        <li><a href="#important-una-base-de-dades-dexemple">Important una base de dades d&rsquo;exemple</a></li>
      </ul>
    </li>
    <li><a href="#annex-ii-postman">Annex II. Postman</a></li>
  </ul>
</nav>

</aside>

<script>

    (function () {
        let entries = document.querySelectorAll(".table-of-contents li");

        for (entry of entries) {
            entry.addEventListener("click", function (e) {
                
                e.stopPropagation();
                for (sel of document.querySelectorAll(".selected"))
                    sel.classList.remove("selected");
                e.currentTarget.classList.add("selected");
                
                for (item of e.currentTarget.children)
                    if (item == "[object HTMLUListElement]")
                        if (item.style.display == "none")
                            item.style.display = "block";
                        else item.style.display = "none"

            });
        }

    
    let entriesh2 = document.querySelectorAll(".table-of-contents li > ul");

        for (entry of entriesh2) {
            entry.style.display = "none";
        }


    })();

</script>        

</div> 

<div class="footer-container">
    
</div>
</body>

</html>